#include <Arduboy2.h>
#include "World.h"
#include "Images.h"

extern Arduboy2 arduboy;

const uint8_t world[WORLD_WIDTH_IN_TILES*WORLD_HEIGHT_IN_TILES] PROGMEM = {
0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,
1,8,9,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,8,9,0,0,0,0,0,1,1,1,1,10,8,3,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,
1,10,11,0,0,0,1,1,1,8,9,0,0,0,0,1,1,1,10,11,0,0,0,0,0,1,5,5,5,0,10,11,10,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,
0,1,0,0,0,1,1,1,1,10,11,0,0,0,3,0,1,1,1,1,1,0,0,14,13,13,5,5,5,1,0,1,1,10,11,10,11,10,11,10,8,9,8,9,8,9,8,9,
0,0,0,0,0,1,8,9,1,1,1,0,0,1,3,3,0,1,1,12,0,0,1,1,1,1,6,7,6,1,0,1,1,0,1,1,1,1,1,1,10,11,10,8,9,8,9,8,
0,0,0,0,0,1,10,11,1,1,0,0,1,3,3,3,0,0,0,12,0,2,2,2,2,2,2,2,1,0,0,0,0,1,1,1,0,0,0,0,1,1,1,10,8,9,8,9,
0,0,0,0,0,0,1,1,0,0,0,0,1,0,3,0,0,1,1,12,1,2,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,0,0,0,1,1,8,9,8,9,8,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,13,13,13,15,1,2,0,0,1,0,0,0,0,0,1,1,0,2,1,1,0,0,0,0,0,0,1,10,8,9,8,9,
0,0,1,0,0,1,1,1,0,0,0,0,1,0,14,15,1,1,0,0,0,2,0,0,1,1,0,8,9,1,1,3,0,2,1,0,5,5,5,1,0,0,1,1,10,8,9,8,
0,0,8,9,0,1,1,1,1,8,9,1,1,1,12,0,0,5,5,5,0,2,1,8,9,4,4,4,11,0,3,3,3,2,0,5,5,5,5,1,0,0,1,1,8,9,8,9,
0,1,10,11,1,0,0,1,1,10,11,1,1,0,12,0,0,5,5,5,5,2,1,10,11,4,4,4,1,0,3,3,3,2,0,5,5,5,6,0,0,0,1,1,10,8,9,8,
0,1,0,0,0,8,9,0,1,1,1,0,0,0,12,0,1,6,5,5,5,2,1,1,0,6,7,6,1,1,1,1,0,2,0,6,7,6,1,1,0,0,1,1,1,10,8,9,
0,0,1,1,1,10,11,1,1,1,1,0,0,1,0,1,1,1,6,7,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,1,1,1,8,9,8,
0,0,0,1,1,1,1,1,1,0,0,1,1,2,2,2,2,2,2,2,2,2,1,1,1,0,0,1,1,1,0,0,1,1,2,2,2,2,2,1,0,3,3,1,1,10,8,9,
0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,1,14,13,13,13,13,13,13,13,13,15,0,1,1,2,2,1,0,3,3,3,3,1,1,10,11,
0,0,0,0,1,1,0,0,0,0,0,0,0,0,14,13,13,13,13,15,0,2,1,1,0,0,1,1,1,1,1,1,12,1,8,9,1,1,0,0,3,3,3,3,3,0,0,0,
0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,12,0,2,1,0,0,0,0,1,1,1,1,0,12,0,10,11,1,1,1,0,0,1,3,3,0,0,0,0,
0,1,1,0,1,0,0,8,9,1,1,1,0,0,0,8,9,0,0,12,1,2,1,4,4,4,0,0,0,0,0,1,12,0,1,1,1,0,8,9,1,0,0,0,0,0,0,0,
0,8,9,1,1,0,0,10,11,1,1,1,1,0,1,10,8,9,0,12,1,2,1,4,4,4,0,5,5,5,1,0,12,1,0,0,0,1,10,11,1,0,0,0,1,0,0,0,
0,10,11,1,1,0,1,1,1,1,8,9,1,0,1,1,10,8,9,12,1,2,0,4,4,4,1,5,5,5,1,0,12,1,1,1,0,0,1,1,1,1,0,0,1,1,1,8,
1,0,1,1,1,0,0,0,1,1,10,11,0,1,1,1,8,9,11,12,1,2,0,6,7,6,1,5,5,5,1,0,12,1,1,0,0,0,1,1,1,0,0,0,1,1,8,9,
0,1,0,0,8,9,0,0,1,1,1,1,0,1,1,1,10,8,9,12,1,2,0,0,2,1,1,6,7,6,1,0,0,1,0,0,1,1,1,0,1,1,0,1,1,1,10,8,
0,0,0,0,10,11,1,1,1,0,0,0,0,0,1,1,1,10,11,12,0,2,2,2,2,2,2,2,2,2,2,1,0,1,0,0,1,0,1,1,1,0,0,0,1,1,8,9,
0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,12,0,2,1,1,1,1,1,0,0,1,1,0,0,0,0,1,1,1,1,1,1,8,9,0,1,8,9,8,
0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,12,1,2,1,14,13,13,13,13,13,13,13,13,15,1,0,1,1,1,1,1,8,9,11,0,0,10,8,9,
0,0,0,8,9,0,0,0,1,1,8,9,1,0,0,0,0,0,0,12,1,2,0,12,0,0,0,0,8,9,0,0,1,1,0,8,9,0,0,0,10,11,0,0,0,8,9,8,
0,0,1,10,11,0,0,8,9,1,10,11,0,0,0,0,0,8,9,12,0,1,0,12,1,1,1,1,10,11,1,0,0,1,0,10,8,9,0,0,0,0,0,0,0,10,8,9,
0,0,0,1,1,1,1,10,11,1,1,0,0,1,1,1,1,10,8,9,0,0,0,0,1,8,9,1,1,1,1,0,0,1,1,0,10,8,9,1,1,0,0,0,0,8,9,8,
0,0,1,0,0,1,1,1,0,0,0,0,0,8,9,1,1,1,10,11,0,0,0,0,1,10,11,1,1,1,1,0,1,1,0,0,8,9,11,1,0,0,0,0,0,10,8,9,
0,1,8,9,1,1,0,0,0,0,0,0,0,10,11,1,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,0,1,0,0,0,10,8,9,0,1,0,0,8,9,8,9,8,
0,0,10,11,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0,1,1,0,0,0,8,9,11,1,8,9,8,9,8,9,8,9,
0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,8,9,8,9,8,9,8,9,8,9,8,
};

//9928 - 9796 = 132 --- 9928
uint8_t loaded_world_section[SECTION_WIDTH_IN_TILES*SECTION_HEIGHT_IN_TILES] = {
    1,1,0,0,0,2,0,0,0,0,0,12,13,1,1,1,
    0,5,5,5,0,2,1,12,13,4,4,4,15,0,11,1,
    0,5,5,5,5,2,1,14,15,4,4,4,1,0,11,11,
    1,6,5,5,5,2,1,1,0,6,7,6,1,1,1,0,
    1,1,6,7,6,2,2,2,2,2,2,2,2,2,2,2,
    2,2,2,2,2,2,1,1,1,11,0,1,1,1,0,0,
    1,1,1,1,1,1,0,11,11,11,11,0,0,0,0,1,
    1,1,1,0,0,0,0,0,11,11,1,1,1,1,1,1,
};


int8_t x_on_grid(int16_t x) {
    x = (x / TILE_WIDTH);
    x = max(x, 0);
    x = min(x, SECTION_WIDTH_IN_TILES-1);
    
    return x;
}
int8_t y_on_grid(int16_t y) {
    y = (y / TILE_WIDTH);
    y = max(y, 0);
    y = min(y, SECTION_HEIGHT_IN_TILES-1);
    
    return y;
}

int8_t x_on_grid_progmem(int16_t x) {
    x = (x / TILE_WIDTH);
    x = max(x, 0);
    x = min(x, WORLD_WIDTH_IN_TILES-1);
    
    return x;
}
int8_t y_on_grid_progmem(int16_t y) {
    y = (y / TILE_WIDTH);
    y = max(y, 0);
    y = min(y, WORLD_HEIGHT_IN_TILES-1);
    
    return y;
}
void set_tile(uint8_t xIndex, uint8_t yIndex, uint8_t value) {
    loaded_world_section[SECTION_WIDTH_IN_TILES * yIndex + xIndex] = value;
}

uint8_t get_tile(uint8_t xIndex, uint8_t yIndex) {
    return loaded_world_section[SECTION_WIDTH_IN_TILES * yIndex + xIndex];
}
uint8_t get_tile_progmem(uint8_t xIndex, uint8_t yIndex) {
    return pgm_read_byte(&(world[WORLD_WIDTH_IN_TILES * yIndex + xIndex]));
}

bool is_tile_solid(int16_t x, int16_t y) {
    return (4 <= get_tile(x, y));
}
bool is_tile_solid_progmem(int16_t x, int16_t y) {
    return (4 <= get_tile_progmem(x, y));
}

bool detect_wall(int16_t x, int16_t y) {
    int8_t x1 = x_on_grid(x);
    int8_t x2 = x_on_grid(x+TILE_WIDTH-1);
    int8_t y1 = y_on_grid(y);
    int8_t y2 = y_on_grid(y+TILE_WIDTH-1);
    
    return ((is_tile_solid(x1, y1) || is_tile_solid(x2, y1) || is_tile_solid(x2, y2) || is_tile_solid(x1, y2)));
}

bool detect_wall_progmem(int16_t x, int16_t y) {
    int8_t x1 = x_on_grid_progmem(x);
    int8_t x2 = x_on_grid_progmem(x+TILE_WIDTH-1);
    int8_t y1 = y_on_grid_progmem(y);
    int8_t y2 = y_on_grid_progmem(y+TILE_WIDTH-1);
    
    return ((is_tile_solid_progmem(x1, y1) || is_tile_solid_progmem(x2, y1) || is_tile_solid_progmem(x2, y2) || is_tile_solid_progmem(x1, y2)));
}

void draw_world() {
    for(uint8_t x = 0; x < SECTION_WIDTH_IN_TILES; x++) {
        for(uint8_t y = 0; y < SECTION_HEIGHT_IN_TILES; y++) {
            uint8_t frame = get_tile(x, y);
            Sprites::drawSelfMasked(x*8, y*8, spr_world, frame);
        }
    }
}
